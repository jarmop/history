{"version":3,"sources":["components/Scrollbar.module.css","components/App.module.css","components/Window.module.css","data/england-data.ts","data/england.ts","components/Window.tsx","components/Scrollbar.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","timePeriods","name","start","end","rulers","events","year","mapYearToRuler","data","reduce","accumulator","currentValue","mapYearToEventName","Window","startYear","endYear","onTimeSpanChange","useState","isScrollListenerInitialized","setScrollListenerInitialized","windowDomObject","React","createRef","years","Array","from","length","value","index","useEffect","tableRows","current","children","tableRowsLength","window","addEventListener","event","viewPortBottomOffset","scrollY","innerHeight","startYearFound","i","tableRowOffset","item","offsetTop","yearText","textContent","parseInt","className","styles","ref","map","key","ruler","england","eventName","Scrollbar","windowTimeSpan","scrollbarContainerWidth","setScrollbarWidth","timeSpan","scrollbarDomObject","offsetWidth","scrollbarContainer","style","width","scrollbar","handle","top","height","App","setWindowTimeSpan","app","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f372e40b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scrollbarContainer\":\"Scrollbar_scrollbarContainer__1JbMt\",\"scrollbar\":\"Scrollbar_scrollbar__TcP4n\",\"handle\":\"Scrollbar_handle__2Wo0A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1tA9O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"window\":\"Window_window__1lrtp\"};","export default {\n  timePeriods: [\n    {\n      name: 'Plantagenet',\n      start: 1154,\n      end: 1485,\n    },\n    {\n      name: 'Tudor',\n      start: 1485,\n      end: 1603,\n    },\n    {\n      name: 'Stuart',\n      start: 1603,\n      end: 1714,\n    },\n  ],\n  rulers: [\n    {\n      name: 'Henry VII',\n      start: 1485,\n      end: 1509,\n    },\n    {\n      name: 'Henry VIII',\n      start: 1509,\n      end: 1558,\n    },\n    {\n      name: 'Elizabeth I',\n      start: 1558,\n      end: 1603,\n    },\n    {\n      name: 'James I',\n      start: 1603,\n      end: 1627,\n    },\n  ],\n  events: [\n    {\n      name: 'Magna Carta',\n      year: 1215,\n    },\n    {\n      name: 'Hundred years war starts',\n      year: 1337,\n    },\n    {\n      name: 'Peasant\\'s Revolt',\n      year: 1381,\n    },\n    {\n      name: 'Hundred years war ends',\n      year: 1453,\n    },\n    {\n      name: 'Printing press',\n      year: 1440,\n    },\n    {\n      name: 'Fall of the Constantinople',\n      year: 1453,\n    },\n    {\n      name: 'wars of the roses start',\n      year: 1455,\n    },\n    {\n      name: 'wars of the roses end',\n      year: 1485,\n    },\n    {\n      name: 'Columbus finds America',\n      year: 1492,\n    },\n    {\n      name: 'Martin Luther posts his theses',\n      year: 1517,\n    },\n    {\n      name: 'Execution of Anne Boleyn',\n      year: 1536,\n    },\n    {\n      name: 'Nicolaus Copernicus: De Revolutionibus Orbium Coelestium',\n      year: 1543,\n    },\n    {\n      name: 'Spanish Armada defeated',\n      year: 1588,\n    },\n    {\n      name: 'Mayflower to the new world',\n      year: 1620,\n    },\n    {\n      name: 'Isaac Newton: Principia Mathematica',\n      year: 1687,\n    },\n  ],\n};","import data from './england-data';\n\ninterface Ruler {\n    name: string;\n    start: number;\n    end: number;\n}\n\n// interface Event {\n//     name: string;\n//     year: number;\n// }\n\nconst mapYearToRuler = data.rulers.reduce((accumulator, currentValue) => {\n    accumulator[currentValue.start] = currentValue;\n    return accumulator;\n}, [] as Ruler[]);\n\nconst mapYearToEventName = data.events.reduce((accumulator, currentValue) => {\n    accumulator[currentValue.year] = (accumulator[currentValue.year] ? accumulator[currentValue.year] + ', ' : '') + currentValue.name;\n    return accumulator;\n}, [] as string[]);\n\nexport const getRulerName = (year: number): string => {\n    const ruler = mapYearToRuler[year];\n    return ruler ? ruler.name : '';\n};\n\nexport const getEventName = (year: number): string => {\n    const eventName = mapYearToEventName[year];\n    return eventName ? eventName : '';\n};","import React, {useEffect, useState} from 'react';\nimport styles from './Window.module.css';\nimport * as england from '../data/england';\n\nexport type TimeSpan = {startYear: number, endYear: number};\n\ntype OnTimeSpanChange = (timeSpan: TimeSpan) => void;\n\ntype WindowProps = {\n    startYear: number,\n    endYear: number,\n    onTimeSpanChange: OnTimeSpanChange,\n};\n\nconst Window: React.FC<WindowProps> = ({startYear, endYear, onTimeSpanChange}) => {\n    const [isScrollListenerInitialized, setScrollListenerInitialized] = useState(false);\n\n    const windowDomObject = React.createRef<HTMLTableSectionElement>();\n    const years = Array.from({length: endYear - startYear}, (value, index) => startYear + index);\n\n    useEffect(() => {\n        if (isScrollListenerInitialized) {\n            return;\n        }\n\n        const tableRows: HTMLCollection | undefined = windowDomObject.current?.children;\n        const tableRowsLength = tableRows ? tableRows.length : 0;\n        if (tableRowsLength > 0) {\n            window.addEventListener('scroll', event => {\n                const viewPortBottomOffset = window.scrollY + window.innerHeight;\n                let startYear = 0;\n                let endYear = 0;\n                let startYearFound = false;\n                for (let i = 0; i < tableRowsLength; i++) {\n                    const tableRowOffset = (tableRows?.item(i) as HTMLElement)?.offsetTop;\n                    if (!startYearFound && tableRowOffset && tableRowOffset > window.scrollY) {\n                        const yearText = tableRows?.item(i)?.textContent;\n                        startYear = typeof yearText === 'string' ? parseInt(yearText) : 0;\n                        startYearFound = true;\n                    }\n                    if (startYearFound && tableRowOffset > viewPortBottomOffset) {\n                        const yearText = tableRows?.item(i)?.textContent;\n                        endYear = typeof yearText === 'string' ? parseInt(yearText) : 0;\n                        break;\n                    }\n                }\n                onTimeSpanChange({startYear, endYear});\n            });\n        }\n        setScrollListenerInitialized(true);\n    }, [isScrollListenerInitialized, setScrollListenerInitialized, windowDomObject, onTimeSpanChange]);\n\n    return(\n        <div className={styles.window}>\n            <table>\n                <thead>\n                <tr>\n                    <th>Year</th>\n                    <th>Ruler</th>\n                    <th>Event</th>\n                </tr>\n                </thead>\n                <tbody ref={windowDomObject}>\n                {years.map(year =>\n                    <tr key={year}>\n                        <td>{year}</td>\n                        <td>{england.getRulerName(year)}</td>\n                        <td>{england.getEventName(year)}</td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default Window;","import React, {useEffect, useState} from 'react';\nimport styles from './Scrollbar.module.css';\nimport {TimeSpan} from './Window';\n\ntype ScrollbarProps = {\n    startYear: number,\n    endYear: number,\n    windowTimeSpan: TimeSpan,\n};\n\nconst Scrollbar: React.FC<ScrollbarProps> = ({startYear, endYear, windowTimeSpan}) => {\n    const [scrollbarContainerWidth, setScrollbarWidth] = useState<number | undefined>(0);\n    const timeSpan = endYear - startYear;\n    const unitSize = 100;\n    const years = Array.from({length: timeSpan / unitSize}, (value, index) => startYear + index * unitSize);\n    const scrollbarDomObject =  React.createRef<HTMLDivElement>();\n\n    useEffect(() => {\n       setScrollbarWidth(scrollbarDomObject.current?.offsetWidth);\n    }, [scrollbarDomObject]);\n\n    return (\n        <div className={styles.scrollbarContainer} style={{width: scrollbarContainerWidth}}>\n            <div className={styles.scrollbar} ref={scrollbarDomObject}>\n                <div className={styles.handle} style={{\n                    width: scrollbarContainerWidth,\n                    top: (windowTimeSpan.startYear - startYear) / timeSpan * 100 + '%',\n                    height: (windowTimeSpan.endYear - windowTimeSpan.startYear) / timeSpan * 100 + '%',\n                }}></div>\n                {years.map(year =>\n                    <div key={year}>{year}</div>\n                )}\n                <div>{endYear}</div>\n            </div>\n        </div>\n    );\n};\n\nexport default Scrollbar;","import React, {useState} from 'react';\nimport styles from './App.module.css';\nimport Window from './Window';\nimport Scrollbar from './Scrollbar';\n\nconst App: React.FC = () => {\n    const [windowTimeSpan, setWindowTimeSpan] = useState({startYear: 0, endYear: 0});\n\n    return (\n        <div className={styles.app}>\n            <Scrollbar startYear={1200} endYear={1800} windowTimeSpan={windowTimeSpan}/>\n            <Window startYear={1200} endYear={1800} onTimeSpanChange={setWindowTimeSpan}/>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}